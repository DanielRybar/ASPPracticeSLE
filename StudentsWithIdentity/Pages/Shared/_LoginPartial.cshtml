@using Microsoft.AspNetCore.Identity
@using StudentsWithIdentity.Models
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        @*
        @if (!String.IsNullOrEmpty((await (UserManager.GetUserAsync(User))).Firstname) && !String.IsNullOrEmpty((await (UserManager.GetUserAsync(User))).Lastname))
        {
            <a class="nav-link" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Ahoj <b>@((await UserManager.GetUserAsync(User)).Firstname) @((await UserManager.GetUserAsync(User)).Lastname)!</b></a>
        }
        else
        {
            <a class="nav-link" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Ahoj <b>@UserManager.GetUserName(User)!</b></a>
        }
        *@
            <a class="nav-link" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Ahoj <b>@((await UserManager.GetUserAsync(User)).Fullname)!</b></a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
